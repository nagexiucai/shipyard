defaults: &defaults
  working_directory: /go/src/github.com/opsforgeio/shipyard
  docker:
    - image: circleci/golang:1.8

version: 2
jobs:
  go-test-controller:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Run GO test suite
          command: |
            go get -v -t -d ./...
            go get -d github.com/stretchr/testify/assert
            go get github.com/tools/godep
            bash test.sh

  build-controller:
    working_directory: /go/src/github.com/opsforgeio/shipyard
    docker:
      - image: golang:1.8-stretch
    steps:
      - checkout
      - run:
          name: Set up build environment
          command: |
            curl -sL https://deb.nodesource.com/setup_9.x | bash -
            apt-get update
            apt-get install -y --allow-unauthenticated nodejs wget curl gzip build-essential
            apt-get clean
            npm install -g bower
            go get github.com/tools/godep
            wget -P /tmp https://download.docker.com/linux/static/stable/x86_64/docker-17.09.0-ce.tgz
            gunzip /tmp/docker-17.09.0-ce.tgz
            tar -xvf /tmp/docker-17.09.0-ce.tar -C /tmp
            cp /tmp/docker/docker /usr/local/bin/docker
            chmod +x /usr/local/bin/docker
            rm -rf /tmp/docker*
            go get -v -d ./...
      - run:
          name: Build controller binary
          command: |
            make build
            make media
      - persist_to_workspace:
          root: controller
          paths:
            - controller
            - static

  build-proxy:
    working_directory: /go/src/github.com/opsforgeio/shipyard
    docker:
      - image: golang:1.8-stretch
    steps:
      - checkout
      - run:
          name: Set up build environment
          command: |
            apt-get update
            apt-get install -y --allow-unauthenticated wget curl gzip build-essential
            apt-get clean
            go get github.com/tools/godep
      - run:
          name: Build proxy binary
          command: |
            cd docker-proxy
            go get -v -d ./...
            make build
      - persist_to_workspace:
          root: docker-proxy
          paths:
            - docker-proxy

  dryrun-controller:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: controller
      - run:
          name: Build docker images
          command: |
            make image
            make testimage

  dryrun-proxy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-proxy
      - run:
          name: Build docker images
          command: |
            cd docker-proxy
            make image
            make testimage

  qc-controller:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: controller
      - run:
          name: Build and push docker image for controller
          command: |
            make testimage
            make testrelease

  qc-proxy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-proxy
      - run:
          name: Build and push docker image for docker-proxy
          command: |
            cd docker-proxy
            make testimage
            make testrelease

  smoketest-convscript:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Deploying shipyard using wrapper script
          command: |
            bash deploy/setup.sh qc
      - run:
          name: Using curl to verify shipyard accessibility on 8080
          command: |
            cd .circleci
            docker build -t curl .
            docker run -ti --link shipyard-controller curl -vILks http://shipyard-controller:8080 &>/dev/null
      - run:
          name: Using curl to verify shipyard content on 8080
          command: |
            docker run -ti --link shipyard-controller curl -Lks http://shipyard-controller:8080 | grep -i 'ui-view' &>/dev/null

  smoketest-compose3:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Deploying shipyard using Docker Compose v3
          command: |
            cd deploy
            bash launch.sh qc
      - run:
          name: Using curl to verify shipyard accessibility on 8080
          command: |
            cd .circleci
            docker build -t curl .
            docker run -ti --network=shipyard_shipyard curl -vILks http://shipyard_controller_1:8080 &>/dev/null
      - run:
          name: Using curl to verify shipyard content on 8080
          command: |
            docker run -ti --network=shipyard_shipyard curl -Lks http://shipyard_controller_1:8080 | grep -i 'ui-view' &>/dev/null

  deploy-controller:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: controller
      - run:
          name: Build and push docker image for controller
          command: |
            make image
            make release

  deploy-proxy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-proxy
      - run:
          name: Build and push docker image for docker-proxy
          command: |
            cd docker-proxy
            make image
            make release




workflows:
  version: 2
  shipyard-pipeline:
    jobs:
      # CODE TESTING STEPS
      - go-test-controller
      # BUILDING STEPS
      - build-controller:
          requires:
            - go-test-controller
      - build-proxy
      # INTEGRATION TESTING STEPS
      - dryrun-controller:
          requires:
            - build-controller
      - dryrun-proxy:
          requires:
            - build-proxy
      # ---- MASTER BRANCH ONLY ----
      # QC IMAGES FOR SMOKETESTS
      - qc-controller:
          filters:
            branches:
              only:
                - master
          requires:
            - dryrun-controller
      - qc-proxy:
          filters:
            branches:
              only:
                - master
          requires:
            - dryrun-proxy
      # SMOKE TESTING OF AUTOMATED DEPLOYMENTS
      - smoketest-convscript:
          filters:
            branches:
              only:
                - master
          requires:
            - qc-controller
            - qc-proxy
      - smoketest-compose3:
          filters:
            branches:
              only:
                - master
          requires:
            - qc-controller
            - qc-proxy
      # DEPLOYING NEW BASE IMAGES TO DOCKERHUB
      - deploy-controller:
          filters:
            branches:
              only:
                - master
          requires:
            - smoketest-convscript
            - smoketest-compose3
      - deploy-proxy:
          filters:
            branches:
              only:
                - master
          requires:
            - smoketest-convscript
            - smoketest-compose3
